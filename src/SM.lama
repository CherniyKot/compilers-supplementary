-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  -- printf("%s", map.string)
  [fun (l) {
    -- printf("%s", l.string);
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  fun makeFunState (args, l) {
    [listArray(args), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup (localState, loc) {
    case localState of [args, locs] ->
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac esac
  }

  -- Assigns a value to a location
  fun assign (localState@[args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, controlStack, localState, w], insns) {
    -- printf("%s\n", insns.string);
    case insns of
      {} -> c
      | insn:rest -> 
      -- printf("%s - %s - %s\n", stack.string, controlStack.string, insn.string);
       eval(
          case insn of
            READ      -> case readWorld(w) of [v, w] -> [v: stack, controlStack, localState, w] esac
          | WRITE     -> case stack of s: stack -> [stack, controlStack, localState, writeWorld(s, w)] esac
          | BINOP (op)-> case stack of l: r: stack -> [evalOp(op, l, r): stack, controlStack, localState, w] esac
          | LD    (x) -> case lookup(localState, x) of v -> [v: stack, controlStack, localState, w] esac
          | LDA   (x) -> [x: stack, controlStack, localState, w]
          | ST    (x) -> case stack of v: stack-> assign(localState, x, v); [stack, controlStack, localState, w] esac
          | STI       -> --printf("%s %s\n", localState.string, insn.string);
          case stack of v: x: stack -> assign(localState, x, v);-- printf("%s %s\n", localState.string, insn.string);
           [v: stack, controlStack, localState, w] esac
          | CONST (n) -> [n: stack, controlStack, localState, w]
          | LABEL (s) -> c
          | JMP   (l) -> rest := env.fromLabel(l); c
          | CJMP  (cc, l) ->  
              case stack of s:stack -> 
                if ((compare(cc, "z") == 0 && s == 0) !!
                    (compare(cc, "nz") == 0 && s != 0)) 
                then rest := env.fromLabel(l)
                fi; 
                [stack, controlStack, localState, w]
              esac
          -- | DUP          -> "DUP"
          | DROP       ->  case stack of s:stack -> [stack, controlStack, localState, w] esac
          | CALL   (f, _)    -> case rest of rest_ ->rest:=env.fromLabel(f); [stack, [localState, rest_]: controlStack, localState, w] esac
          | BEGIN  (_, a, l) -> 
              case stack.take(a) of [stack, args] ->
              case makeFunState(args, l) of newLocalState ->
                [stack, controlStack, newLocalState, w]
              esac
              esac
          | END -> 
          case controlStack of [localState, instr]: controlStack ->
            rest:=instr;
            [stack, controlStack, localState, w]
          | _ -> c
          esac
          | GLOBAL (x)      -> assign(localState, Glb(x), 0); c
          esac,
          rest
        )
      esac
      }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals+1, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun jump (lab, labUsed) {
    if labUsed
    then singletonBuffer (JMP (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lbl, env, expr) {
    case expr of
      Skip              -> [false, env, 0]
    | Var    (x)        -> [false, env, 0 <+ LD (lookupVar(env, x))]
    | Ref    (x)        -> [false, env, 0 <+ LDA (lookupVar(env, x))]
    | Const  (n)        -> [false, env, 0 <+ CONST (n)]
    | Read    (x)         -> [false, env, 0 <+ READ <+ ST (lookupVar(env, x))]
    | Write   (e)         ->
        case genLabel(env) of [lbl, env] ->
          case compile (lbl, env, e) of [lblUsed, env, code] -> 
            [false, env, 
                        code 
                    <+> label(lbl, lblUsed) 
                    <+  WRITE]
          esac
        esac
    | Seq     (e1, e2)    ->
        case genLabel(env) of [e2Lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of[lblUsed, env, e2Code] -> 
            [lblUsed, env, 
                            e1Code
                        <+> label (e2Lbl, e2LblUsed)
                        <+> e2Code]
          esac
          esac
        esac
    | If      (cond, trueE, falseE) -> 
        case genLabel(env) of [endCondLbl, env] ->
        case genLabel(env) of [falseLbl, env] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
          case compile(lbl, env, trueE) of [_, env, trueCode] ->
          case compile(lbl, env, falseE) of [_, env, falseCode] ->
              [true, env, 
                          condCode 
                      <+> label(endCondLbl, endCondLblUsed) 
                      <+  CJMP("z", falseLbl) 
                      <+> trueCode 
                      <+  JMP(lbl) 
                      <+  LABEL(falseLbl) 
                      <+> falseCode]
          esac
          esac
          esac
        esac
        esac
    | While   (cond, e) -> 
        case genLabel(env) of [startLbl, env] ->
        case genLabel(env) of [condLbl, env] ->
        case genLabel(env) of [endCondLbl, env] ->
          case compile(condLbl, env, e) of [condLblUsed, env, code] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
            [false, env, 0 <+ 
                              JMP(condLbl) 
                          <+  LABEL(startLbl) 
                          <+> code 
                          <+  LABEL(condLbl) 
                          <+> condCode 
                          <+> label(endCondLbl, endCondLblUsed) 
                          <+  CJMP("nz", startLbl) ]
          esac
          esac
        esac
        esac
        esac
    | DoWhile (e, cond) ->
        case genLabel(env) of [startLbl, env] ->
        case genLabel(env) of [condLbl, env] ->
        case genLabel(env) of [endCondLbl, env] ->
          case compile(condLbl, env, e) of [condLblUsed, env, code] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
            [false, env, 0 <+ 
                              LABEL(startLbl) 
                          <+> code 
                          <+> condCode
                          <+> label(endCondLbl, endCondLblUsed) 
                          <+  CJMP("nz", startLbl) ]
          esac
          esac
        esac
        esac
        esac
    | Assn    (e1, e2) ->
        case genLabel(env) of [e2Lbl, env] ->
        case genLabel(env) of [lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of [lblUsed, env, e2Code] -> 
            [false, env, 
                          e1Code 
                      <+> label(e2Lbl, e2LblUsed)
                      <+> e2Code 
                      <+> label(lbl, lblUsed) 
                      <+  STI]
          esac
          esac
        esac
        esac
    | Binop   (op, e2, e1) ->
        case genLabel(env) of [e2Lbl, env] ->
        case genLabel(env) of [lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of [lblUsed, env, e2Code] -> 
            [false, env, 
                          e1Code 
                      <+> label(e2Lbl, e2LblUsed) 
                      <+> e2Code 
                      <+> label(lbl, lblUsed) 
                      <+  BINOP(op)]
          esac
          esac
        esac
        esac

    | Ignore(e) -> 
        case genLabel(env) of [lbl, env] ->
          case compile (lbl, env, e) of [lblUsed, env, code] ->
            [false, env, 
                          code 
                      <+> label(lbl, lblUsed) 
                      <+  DROP]
          esac
        esac
    | Scope(defs, e) ->
        case beginScope(env) of env ->
        case addDefs(env, defs) of env ->
        case generateGlobalsAndRememberFuns(env, defs) of [env, globalsCode] ->
        case genLabel(env) of [codeStartLbl, env] ->
          case compile(lbl, env, e) of [lblUsed, env, code] ->
          case env.compileFunctions of [functionsCode, funN, env] ->
          case funN != 0 of codeStartLblUsed ->
              -- printf("%d, %d\n", getLocals(env), getLocals(env.endScope));
              [true, env.endScope, 
                                  globalsCode
                              <+> code
                              <+  JMP(lbl)
                              <+> functionsCode]
          esac
          esac
          esac
        esac
        esac
        esac
        esac
    | Call(name, argExprs) ->
        case lookupFun(env, name) of Fun (funLbl, nArgs) ->
        case genLabel(env) of [callLbl, env] ->
        case compileArgs(env, callLbl, argExprs) of [lblUsed, env, code] ->
          [false, env, code <+> label(callLbl, lblUsed) <+ CALL(funLbl, nArgs) ]
        esac
        esac
        esac


    -- | CALL   (f, n)    -> {}
    -- | BEGIN  (f, a, l) -> {}
    -- | GLOBAL (x)       -> {}
    -- | END              -> {}
    esac
  }

fun compileFunctions(env) {
  case env.getFuns of [funs, env] ->
  case foldl(fun([env, prevCode, funN], Fun(fLabel, args, body, state)) {
    case env.beginFun(state).addArgs(args) of env ->
    case genLabel(env) of [lbl, env] ->
    case compile(lbl, env, body) of [lblUsed, env, code] ->
      [env, prevCode <+ LABEL(fLabel) <+ BEGIN(fLabel, args.size, getLocals(env)) <+> code <+> label(lbl, lblUsed) <+ END, funN + 1]
    esac
    esac
    esac
  }, [env, 0, 0], funs) of [env, code, funN] -> [code, funN, env]
  esac
  esac
}

fun addDefs(env, defs){
  foldl (fun (env, def) 
  {
    case def of
      Var(names) -> env.addVars(names)
    | Fun(name, args, expr) -> 
        case env.genFunLabel(name) of [lbl, env] ->
          env.addFun(name, lbl, args.size)
        esac
    esac
  }, env, defs)
}

fun generateGlobalsAndRememberFuns(env, defs){
  foldl (fun ([env, prevCode], def) 
    {
      case def of
        Var(names) ->
        if env.isGlobal then
        case foldl (fun (code, name) 
          {
            code <+ GLOBAL(name)
          }, prevCode, names) of code -> [env, code] esac
        else [env, prevCode] 
        fi 
      | Fun(name, args, expr) -> 
          case lookupFun(env, name) of Fun (lbl, _) ->
            [env.rememberFun(lbl, args, expr), prevCode]
          esac
      esac
    }, [env, 0], defs)
}

fun compileArgs(env, callLbl, argExprs){
  case foldl(fun(exprs, expr){
    Seq(exprs, expr)
  }, Skip, argExprs) of exprs ->
    compile(callLbl, env, exprs)
  esac
}

-- fun compileGlobals(env, defs) {
--   case foldl (fun ([env, prevCode], def) {
--     case def of
--       Var(names) -> env
--     | Fun(name, args, expr) -> [env, prevCode]
--     esac
--   }, [env, 0], defs) of env ->
--   esac
-- }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
        --  printf("%s\n\n\n%s\n", stmt.string, code.string);
          getBuffer $ 0 <+ LABEL ("main") <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END 
       esac
  esac
}

