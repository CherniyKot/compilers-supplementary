-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  fun makeFunState (args, l) {
    [listArray(args), initArray (l, fun (_) {0})]
  }

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign (localState@[args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, controlStack, localState, w], insns) {
    case insns of
      {} -> c
      | insn:rest -> 
      -- printf("%s - %s - %s - %s\n", stack.string, controlStack.string, localState.string, insn.string);
       eval(
          case insn of
            READ      -> case readWorld(w) of [v, w] -> [v: stack, controlStack, localState, w] esac
          | WRITE     -> case stack of s: stack -> [stack, controlStack, localState, writeWorld(s, w)] esac
          | BINOP (op)-> case stack of l: r: stack -> [evalOp(op, l, r): stack, controlStack, localState, w] esac
          | LD    (x) -> case lookup(localState, x) of v -> [v: stack, controlStack, localState, w] esac
          | LDA   (x) -> [x: stack, controlStack, localState, w]
          | ST    (x) -> case stack of v: _-> assign(localState, x, v); [stack, controlStack, localState, w] esac
          | STI       -> --printf("%s %s\n", localState.string, insn.string);
              case stack of v: x: stack -> 
                assign(localState, x, v);-- printf("%s %s\n", localState.string, insn.string);
                [v: stack, controlStack, localState, w]
              esac
          | CONST (n) -> [n: stack, controlStack, localState, w]
          | LABEL (s) -> c
          | JMP   (l) -> rest := env.fromLabel(l); c
          | CJMP  (cc, l) ->  
              case stack of s:stack -> 
                if ((compare(cc, "z") == 0 && s == 0) !!
                    (compare(cc, "nz") == 0 && s != 0)) 
                then rest := env.fromLabel(l)
                fi; 
                [stack, controlStack, localState, w]
              esac
          -- | DUP          -> "DUP"
          | DROP       ->  case stack of s:stack -> [stack, controlStack, localState, w] esac
          | CALL   (f, _)    ->
              case rest of rest_ ->
                rest:=fromLabel(env, f);
                [stack, [localState, rest_]: controlStack, localState, w] 
              esac
          | BEGIN  (_, a, l) -> 
              case stack.take(a) of [stack, args] ->
              case makeFunState(args, l) of newLocalState ->
                [stack, controlStack, newLocalState, w]
              esac
              esac
          | END -> 
              case controlStack of [localState, instr]: controlStack ->
                rest:=instr;
                [stack, controlStack, localState, w]
              | _ -> c
              esac
          | GLOBAL (x)      -> assign(localState, Glb(x), 0); c
          | STRING (s)       -> [s:stack, controlStack, localState, w]
          | ARRAY  (n)       ->
              case stack.take(n) of [stack, args] ->
                [listArray(args):stack, controlStack, localState, w]
              esac
          | STA              -> 
              case stack of v:ind:arr:stack ->
                arr[ind]:=v;
                [v:stack, controlStack, localState, w]
              esac
          | ELEM             ->
              case stack of ind:arr:stack ->
                [arr[ind]:stack, controlStack, localState, w]
              esac
          | BUILTIN(f, nArgs) ->
              case stack.take(nArgs) of [stack, args] ->
              case evalBuiltin(f, args, w) of [v, w] ->
                [v: stack, controlStack, localState, w]
              esac
              esac
          
          esac, rest
        )
      esac
      }

  -- printf("%s\n", insns.string);
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals+1, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Arg (i) -> Arg (i)
    | Glb (x, true) -> Glb (x)
    | x             -> error (sprintf ("the name ""%s"" does not designate a variable", x.string), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}


fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}


-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun jump (lab, labUsed) {
    if labUsed
    then singletonBuffer (JMP (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lbl, env, expr) {
    case expr of
      Skip              -> [false, env, 0]
    | Var    (x)        -> [false, env, 0 <+ LD (lookupVar(env, x))]
    | Ref    (x)        -> [false, env, 0 <+ LDA (lookupVar(env, x))]
    | Const  (n)        -> [false, env, 0 <+ CONST (n)]
    | Seq     (e1, e2)    ->
        case genLabel(env) of [e2Lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of[lblUsed, env, e2Code] -> 
            [lblUsed, env, 
                            e1Code
                        <+> label (e2Lbl, e2LblUsed)
                        <+> e2Code]
          esac
          esac
        esac
    | If      (cond, trueE, falseE) -> 
        case genLabel(env) of [endCondLbl, env] ->
        case genLabel(env) of [falseLbl, env] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
          case compile(lbl, env, trueE) of [_, env, trueCode] ->
          case compile(lbl, env, falseE) of [_, env, falseCode] ->
              [true, env, 
                          condCode 
                      <+> label(endCondLbl, endCondLblUsed) 
                      <+  CJMP("z", falseLbl) 
                      <+> trueCode 
                      <+  JMP(lbl) 
                      <+  LABEL(falseLbl) 
                      <+> falseCode]
          esac
          esac
          esac
        esac
        esac
    | While   (cond, e) -> 
        case genLabel(env) of [startLbl, env] ->
        case genLabel(env) of [condLbl, env] ->
        case genLabel(env) of [endCondLbl, env] ->
          case compile(condLbl, env, e) of [condLblUsed, env, code] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
            [false, env, 0 <+ 
                              JMP(condLbl) 
                          <+  LABEL(startLbl) 
                          <+> code 
                          <+  LABEL(condLbl) 
                          <+> condCode 
                          <+> label(endCondLbl, endCondLblUsed) 
                          <+  CJMP("nz", startLbl) ]
          esac
          esac
        esac
        esac
        esac
    | DoWhile (e, cond) ->
        case genLabel(env) of [startLbl, env] ->
        case genLabel(env) of [condLbl, env] ->
        case genLabel(env) of [endCondLbl, env] ->
          case compile(condLbl, env, e) of [condLblUsed, env, code] ->
          case compile(endCondLbl, env, cond) of [endCondLblUsed, env, condCode] ->
            [false, env, 0 <+ 
                              LABEL(startLbl) 
                          <+> code 
                          <+> condCode
                          <+> label(endCondLbl, endCondLblUsed) 
                          <+  CJMP("nz", startLbl) ]
          esac
          esac
        esac
        esac
        esac
    | Assn    (e1, e2) ->
        case e1 of
          ElemRef(e1, e11) ->
            case genLabel(env) of [e11Lbl, env] ->
            case genLabel(env) of [e2Lbl, env] ->
            case genLabel(env) of [endLbl, env] ->
                case compile (e11Lbl, env, e1) of [e11LblUsed, env, e1Code] ->
                case compile (e2Lbl, env, e11) of [e2LblUsed, env, e11Code] ->
                case compile (endLbl, env, e2) of [endLblUsed, env, e2Code] -> 
                  [false, env, 
                                e1Code
                            <+> label(e11Lbl, e11LblUsed)
                            <+> e11Code
                            <+> label(e2Lbl, e2LblUsed)
                            <+> e2Code 
                            <+> label(endLbl, endLblUsed) 
                            <+  STA]
                esac
                esac
                esac
            esac
            esac
            esac
        | e1 ->
            case genLabel(env) of [e2Lbl, env] ->
            case genLabel(env) of [endLbl, env] ->
                case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
                case compile (endLbl, env, e2) of [endLblUsed, env, e2Code] -> 
                  [false, env, 
                                e1Code 
                            <+> label(e2Lbl, e2LblUsed)
                            <+> e2Code 
                            <+> label(endLbl, endLblUsed) 
                            <+  STI]
                esac
                esac
            esac
            esac
        esac
    | Binop   (op, e2, e1) ->
        case genLabel(env) of [e2Lbl, env] ->
        case genLabel(env) of [lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of [lblUsed, env, e2Code] -> 
            [false, env, 
                          e1Code 
                      <+> label(e2Lbl, e2LblUsed) 
                      <+> e2Code 
                      <+> label(lbl, lblUsed) 
                      <+  BINOP(op)]
          esac
          esac
        esac
        esac

    | Ignore(e) -> 
        case genLabel(env) of [lbl, env] ->
          case compile (lbl, env, e) of [lblUsed, env, code] ->
            [false, env, 
                          code 
                      <+> label(lbl, lblUsed) 
                      <+  DROP]
          esac
        esac
    | Scope(defs, e) ->
        case beginScope(env) of env ->
        case addDefs(env, defs) of env ->
        case generateGlobalsAndRememberFuns(env, defs) of [env, globalsCode] ->
        case genLabel(env) of [codeStartLbl, env] ->
          case compile(lbl, env, e) of [lblUsed, env, code] ->
          case compileFunctions(env) of [functionsCode, env] ->
              [true, env.endScope, 
                                  globalsCode
                              <+> code
                              <+  JMP(lbl)
                              <+> functionsCode]
          esac
          esac
        esac
        esac
        esac
        esac
    | Call(name, argExprs) ->
        case lookupFun(env, name) of Fun (funLbl, nArgs) ->
        case genLabel(env) of [callLbl, env] ->
        case compileList(env, callLbl, argExprs) of [lblUsed, env, code] ->
        if funLbl[0]=='$' then
          [false, env,  code 
                    <+> label(callLbl, lblUsed) 
                    <+  BUILTIN(substring(funLbl, 1, length(funLbl)-1), nArgs)]
        else
          [false, env,  code 
                    <+> label(callLbl, lblUsed) 
                    <+  CALL(funLbl, nArgs)]
        fi
        esac
        esac
        esac
    
    | Set(ident, expr) ->
        case genLabel(env) of [lbl, env] ->
        case compile(lbl, env, expr) of [lblUsed, env, code] ->
          [false, env,  code <+> label(lbl, lblUsed) <+ ST(lookupVar(env, ident))]
        esac
        esac
    | String(s) -> [false, env, 0 <+ STRING(s)]
    | Array(exprs) -> 
        case genLabel(env) of [lbl, env] ->
        case compileList(env, lbl, exprs) of [lblused, env, code] ->
          [false, env, code
                    <+> label(lbl, lblused)
                    <+ ARRAY(size(exprs))]
        esac
        esac
    | Sexp(tag, exprs) -> 
        case genLabel(env) of [lbl, env] ->
        case compileList(env, lbl, exprs) of [lblused, env, code] ->
          [false, env, code
                    <+> label(lbl, lblused)
                    <+ ARRAY(size(exprs))]
        esac
        esac
    -- case evalList(c, exprs) of [[s, w], vals] ->
    --                         [c, listArray(vals)]
    --                       esac
    | Elem(e1, e2) -> 
        case genLabel(env) of [e2Lbl, env] ->
        case genLabel(env) of [lbl, env] ->
          case compile (e2Lbl, env, e1) of [e2LblUsed, env, e1Code] ->
          case compile (lbl, env, e2) of [lblUsed, env, e2Code] -> 
            [false, env, 
                          e1Code 
                      <+> label(e2Lbl, e2LblUsed) 
                      <+> e2Code 
                      <+> label(lbl, lblUsed) 
                      <+  ELEM]
          esac
          esac
        esac
        esac
    esac


  -- | STRING (s)       -> sprintf ("STRING ""%s""", s)
  -- | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  -- | STA              -> "STA"
  -- | ELEM             -> "ELEM"
  -- | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  }
  
fun compileFunctions(env) {

              -- printf("40:%d, %d\n", getLocals(env), getLocals(env.endScope));
  case getFuns(env) of [funs, env] ->
              -- printf("41:%d, %d\n", getLocals(env), getLocals(env.endScope));
  case foldl(fun([env, prevCode], Fun(fLabel, args, body, state)) {
    case beginFun(env, state).addArgs(args) of env ->
              -- printf("42:%d, %d\n", getLocals(env), getLocals(env.endScope));
    case genLabel(env) of [lbl, env] ->
              -- printf("43:%d, %d\n", getLocals(env), getLocals(env.endScope));
    case compile(lbl, env, body) of [lblUsed, env, code] ->
              -- printf("44:%d, %d\n", getLocals(env), getLocals(env.endScope));
      [env, prevCode 
        <+  LABEL(fLabel)
        <+  BEGIN(fLabel, size(args), getLocals(env))
        <+> code
        <+> label(lbl, lblUsed)
        <+  END]
    esac
    esac
    esac
  }, [env, 0], funs) of [env, code] -> [code, env]
  esac
  esac
}

fun addDefs(env, defs){
  foldl (fun (env, def) 
  {
    case def of
      Var(names) -> addVars(env, names)
    | Fun(name, args, expr) -> 
        case genFunLabel(env, name) of [lbl, env] ->
          addFun(env, name, lbl, size(args))
        esac
    esac
  }, env, defs)
}

fun generateGlobalsAndRememberFuns(env, defs){
  foldl (fun ([env, prevCode], def) 
    {
      case def of
        Var(names) ->
        if env.isGlobal then
        case foldl (fun (code, name) 
          {
            code <+ GLOBAL(name)
          }, prevCode, names) of code -> [env, code] esac
        else [env, prevCode] 
        fi 
      | Fun(name, args, expr) -> 
          case lookupFun(env, name) of Fun (lbl, _) ->
            [env.rememberFun(lbl, args, expr), prevCode]
          esac
      esac
    }, [env, 0], defs)
}

fun compileList(env, callLbl, argExprs){
  case foldl(fun(exprs, expr){
    Seq(exprs, expr)
  }, Skip, argExprs) of exprs ->
    compile(callLbl, env, exprs)
  esac
}

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
          -- printf("%s\n", stmt.string);
       case compile (endLab, env, stmt) of [endLabUsed, env, code] -> 
          -- printf("locals in the end: %d\n", getLocals(env));
          getBuffer $ 0 <+ LABEL ("main") <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END 
       esac
  esac
}
