-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, st, w], insns) {
  
  case insns of
  {} -> [stack, st, w] 
  | insn:rest -> eval(
    case insn of
      READ      -> case readWorld(w) of [v, w1] -> [v:stack, st, w1] esac
    | WRITE     -> case stack of s:rest -> [rest, st, writeWorld(s, w)] esac
    | BINOP (s) -> case stack of l:r:rest -> [evalExpr(emptyState, Binop(s, Const(l), Const(r))):rest, st, w] esac--sorry
    | LD    (x) -> [st(x):stack, st, w]
    | ST    (x) -> case stack of v:rest -> [rest,st<-[x, v], w] esac
    | CONST (n) -> [n:stack,st,w]
    esac, rest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(s) -> {LD(s)}
    |Const (i) -> {CONST(i)}
    |Binop (op, expr1, expr2) -> compileExpr(expr2) +++ compileExpr(expr1) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (s, expr) -> compileExpr(expr) +++ {ST(s)}
    |Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
    |Skip -> {}
    |Read (s) -> {READ, ST(s)}
    |Write(expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
