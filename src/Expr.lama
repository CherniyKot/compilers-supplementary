-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  -- case expr of {} -> {} esac;
  case expr of
      Assn(expr1, expr2) -> case evalList(c, {expr1, expr2}) of [[s, w], {v1, v2}] ->
                              [[s<-[v1, v2], w], v2]
                            esac
    | Seq(expr1, expr2) ->  case eval(c, expr1) of [c, _] ->
                              eval(c, expr2)
                            esac
    | Skip -> [c, 0]
    | Read(ident) ->  case readWorld(w) of [v, w] ->
                        [[s<-[ident, v], w], v]
                      esac
    | Write(expr) ->  case eval(c, expr) of [[s, w], v] ->
                        [[s, writeWorld(v, w)], v]
                      esac
    | If(cond, expr1, expr2) -> 
      case eval(c, cond) of
        [c, 1] -> eval(c, expr1)
      | [c, 0] -> eval(c, expr2)
      esac
    | While(cond, expr) -> eval(c, If(cond, Seq(expr, While(cond, expr)), Skip))
    | DoWhile(expr, cond) -> eval(c, Seq(expr, While(cond, expr)))
    | Var(ident) -> [c, s(ident)]
    | Ref(ident) -> [c, ident]
    | Const(v) -> [c, v]
    | Binop(op, expr1, expr2) ->  case evalList(c, {expr1, expr2}) of [c, {v1, v2}] ->
                                    [c, evalOp(op, v1, v2)] 
                                  esac
    | Ignore(expr) -> case eval(c, expr) of [c, _] -> [c, 0] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
