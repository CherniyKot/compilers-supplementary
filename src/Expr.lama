-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
    case expr of
    Var(s) -> st(s)
    |Const (i) -> i
    |Binop (op, expr1, expr2) -> 
        var e1 = evalExpr(st, expr1);
        var e2 = evalExpr(st, expr2);
        case op of
            "+" -> e1+e2
            |"-" ->e1-e2
            |"*" ->e1*e2 
            |"/" ->e1/e2 
            |"%" ->e1%e2 

            |">" ->e1>e2 
            |"<" ->e1<e2 
            |">=" ->e1>=e2 
            |"<=" ->e1<=e2
            |"==" ->e1==e2 
            |"!=" ->e1!=e2

            |"&&" ->e1&&e2 
            |"!!" ->e1!!e2
            esac
    esac
}
